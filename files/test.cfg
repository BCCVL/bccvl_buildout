[test]
recipe = zc.recipe.testrunner
eggs =
    ${instance:eggs}
    org.bccvl.site [test]
    org.bccvl.theme [test]
    org.bccvl.compute [test]
    org.bccvl.tasks
    org.bccvl.movelib
defaults = ['--auto-color', '--auto-progress',
            '-s', 'org.bccvl.site',
            '-s', 'org.bccvl.theme',
            '-s', 'org.bccvl.compute',
            '-s', 'org.bccvl.tasks',
            '-s', 'org.bccvl.movelib'
           ]

[test-coverage]
recipe = zc.recipe.testrunner
eggs = ${test:eggs}
defaults = ['--coverage', '../../coverage', '-v', '--auto-progress',
            '-s', 'org.bccvl.site',
            '-s', 'org.bccvl.theme',
            '-s', 'org.bccvl.compute',
            '-s', 'org.bccvl.tasks',
            '-s', 'org.bccvl.movelib'
           ]

[test-coverage-report]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport=test-coverage-report
arguments = ('coverage', 'report')



##############################################################################
# Jenkins test stuff
##############################################################################
[jenkins]
jenkins-test-eggs +=
    ${instance:eggs}
    org.bccvl.site [test]
    org.bccvl.theme [test]
    org.bccvl.compute [test]
    org.bccvl.tasks
    org.bccvl.movelib
jenkins-test-directories =
    org.bccvl.site
    org.bccvl.theme
    org.bccvl.compute
    org.bccvl.tasks
    org.bccvl.movelib


[jenkins-test]
# Creates a "jenkins-test" script in the bin directory of the buildout that
# runs the tests and outputs the results in an XML format that Jenkins can read
# and process.
#
# The output files can be included in Jenkins by enabling the
# "Publish JUnit test result report" setting in the "Post-build Actions"
# section of the Job configuration. The "Test report XMLs" field needs to point
# to "parts/jenkins-test/testreports/*.xml".
recipe = collective.xmltestreport
eggs = ${jenkins:jenkins-test-eggs}
script = jenkins-test
environment = jenkins-test-env
defaults = ['--auto-color', '--auto-progress', '--xml',
            '-s', 'org.bccvl.site',
            '-s', 'org.bccvl.theme',
            '-s', 'org.bccvl.compute',
            '-s', 'org.bccvl.tasks',
            '-s', 'org.bccvl.movelib'
           ]

[jenkins-test-env]
zope_i18n_compile_mo_files = true

[jenkins-test-coverage]
# Creates a "jenkins-test-coverage" script in the bin directory of the buildout
# that runs a code coverage analysis and creates a report in an XML format that
# Jenkins can read and process. There is no need to run "bin/jenkins-test"
# before
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    ${:coverage} erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    DIRECTORIES="${jenkins:jenkins-test-directories}"
    # make DIRECTORIES a comma separated list
    SOURCES=$(echo -n $DIRECTORIES | sed  's/[[:space:]]/,/g')
    # Runs a code coverage analysis on top of the "jenkins-test" script for
    # all packages. The data will be collected in a ".coverage" output file
    # in the buildout directory.
    echo "Run coverage tests"
    ${:coverage} run -p --source="$SOURCES" ${:jenkins-test} --all
    echo "Create test coverage report."
    # Combine all package analysis
    ${:coverage} combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    ${:coverage} xml -i -o ${buildout:parts-directory}/jenkins-test/coverage.xml
    echo "Test coverage report finished."
output = ${buildout:bin-directory}/jenkins-test-coverage
mode = 755
# FIXME: depend on coverage and jenkins-test recipe
coverage = ${coverage:bin-directory}/coverage
jenkins-test = ${jenkins-test:bin-directory}/jenkins-test

[coverage]
recipe = zc.recipe.egg
eggs = coverage

