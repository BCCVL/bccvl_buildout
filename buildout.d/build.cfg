
[zopepy]
recipe = zc.recipe.egg
eggs =
     ${instance-settings:eggs}
     zodbupdate
extra-paths = ${instance-settings:extra-paths}
interpreter = zopepy

[zeoserver]
recipe = plone.recipe.zeoserver
zeo-address = ${hosts:zeoserver}:${ports:zeoserver}
zeo-var = ${buildout:directory}/var
file-storage = ${zeoserver:zeo-var}/filestorage/Data.fs
blob-storage = ${zeoserver:zeo-var}/blobstorage
effective-user = ${users:zope}
socket-name = /tmp/zeo.sock

[instance-debug]
recipe = plone.recipe.zope2instance
<= instance-settings
http-address = ${hosts:instance-debug}:${ports:instance-debug}
#webdav-address = ${hosts:instance-debug}:${ports:instance-debug-dav}
debug-mode = on
verbose-security = on

[instance1]
recipe = plone.recipe.zope2instance
<= instance-settings
http-address = ${hosts:instance1}:${ports:instance1}
#webdav-address = ${hosts:instance1}:${ports:instance1-dav}

[instance2]
recipe = plone.recipe.zope2instance
<= instance-settings
http-address = ${hosts:instance2}:${ports:instance2}
#webdav-address = ${hosts:instance2}:${ports:instance2-dav}

[instance3]
recipe = plone.recipe.zope2instance
<= instance-settings
http-address = ${hosts:instance3}:${ports:instance3}
#webdav-address = ${hosts:instance3}:${ports:instance3-dav}

[instance4]
recipe = plone.recipe.zope2instance
<= instance-settings
http-address = ${hosts:instance4}:${ports:instance4}
#webdav-address = ${hosts:instance4}:${ports:instance4-dav}

[plonesite]
recipe = collective.recipe.plonesite
site-id = ${plone-sites:main}
# Create default plone content like News, Events...
# profiles-initial =
#     Products.CMFPlone:plone-content
#     org.bccvl.site:default
profiles-initial =
#    plone.app.contenttypes:plone-content
    org.bccvl.site:default
    org.bccvl.theme:default
instance = instance-debug
zeoserver = zeoserver

##############################################################################
# GDAL bindings
##############################################################################
[GDAL]
recipe = zc.recipe.egg:custom
egg = GDAL
include-dirs = /usr/include/gdal

##############################################################################
# special handling for C-Extensions
##############################################################################
[lxml]
recipe = z3c.recipe.staticlxml
egg = lxml

##############################################################################
# Backups
##############################################################################

[backup]
recipe = collective.recipe.backup

##############################################################################
# ORDF configuration
##############################################################################

[ordf-conf]
recipe = collective.recipe.template
input = ${buildout:directory}/buildout.d/ordf.ini.in
output = ${buildout:directory}/etc/ordf.ini

##############################################################################
# MOAI
##############################################################################
[moai-config]
recipe = collective.recipe.template
input = ${buildout:directory}/buildout.d/moai.ini.in
output = ${buildout:directory}/etc/moai.ini

[moai]
recipe = zc.recipe.egg
eggs =
    MOAI
    PasteScript
    org.bccvl.moai
    oai_xhtml_wrapper

##############################################################################
# Build bibutils and install in buildout bin-directory
##############################################################################
[bibutils]
recipe = hexagonit.recipe.cmmi
url = http://downloads.sourceforge.net/project/bibutils/bibutils_4.14_src.tgz
configure-command =
make-options =
    INSTALLDIR=${buildout:bin-directory}
    LIBINSTALLDIR=${buildout:bin-directory}

##############################################################################
# Develop and test recipes
##############################################################################
[zopeip]
recipe = zc.recipe.egg
eggs =
    ipython
    ${instance-settings:eggs}
extra-paths = ${instance-settings:extra-paths}
scripts = ipython

# install paster scripts to ease development of new packages
# TODO: maybe extend this with various other paster templates
[zopeskel]
recipe = zc.recipe.egg
egg =
    ZopeSkel
    ${instance-settings:eggs}

[instance-ipython]
# an IPython Shell for interactive use with zope running.
# You also need to put
# https://svn.plone.org/svn/collective/dotipython/branches/plone4/
# ipy_profile_zope.py
# in your $HOME/.ipython directory for the following to work.
# You may have to remove an existing ipy_profile_zope.py: if you
# get errors when running ./bin/ipzope, check the stack trace for that
# filename to make sure the correct version is used.
recipe = zc.recipe.egg
eggs =
    ipython
    ${instance-debug:eggs}
initialization =
    import sys, os
    os.environ["INSTANCE_HOME"] = "${instance-debug:location}"
    sys.argv[1:1] = ["--profile=zope", ]
scripts = ipython=instance-ipython

# omelette source merger
[omelette]
recipe= collective.recipe.omelette
eggs = ${instance-settings:eggs}
ignore-develop = True

# Roadrunner - speeds up integration test runs
[roadrunner]
recipe = roadrunner:plone
zope2-instance = instance-debug
packages-under-test =
#    mynamespace

# zope test runner
[test]
recipe = zc.recipe.testrunner
eggs = ${instance-settings:eggs}
defaults = ['--auto-color', '--auto-progress']
#defaults = ['-s', 'my.package', '--auto-color', '--auto-progress']

[test-coverage]
recipe = zc.recipe.testrunner
eggs = ${test:eggs}
defaults = ['--coverage', '../../coverage', '-v', '--auto-progress']

[test-coverage-report]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport=test-coverage-report
arguments = ('coverage', 'report')

[robot]
recipe = zc.recipe.egg
eggs =
    ${instance-settings:eggs}
    plone.app.robotframework[ride]

##############################################################################
# Jenkins test stuff
##############################################################################
[jenkins]
jenkins-test-eggs = ${instance-settings:eggs}
#jenkins-test-directories = ${instance-settings:eggs}
jenkins-test-directories =

[jenkins-test]
# Creates a "jenkins-test" script in the bin directory of the buildout that
# runs the tests and outputs the results in an XML format that Jenkins can read
# and process.
#
# The output files can be included in Jenkins by enabling the
# "Publish JUnit test result report" setting in the "Post-build Actions"
# section of the Job configuration. The "Test report XMLs" field needs to point
# to "parts/jenkins-test/testreports/*.xml".
recipe = collective.xmltestreport
eggs = ${jenkins:jenkins-test-eggs}
script = jenkins-test
environment = jenkins-test-env
defaults = ['--auto-color', '--auto-progress', '--xml']

[jenkins-test-env]
zope_i18n_compile_mo_files = true

[jenkins-test-coverage]
# Creates a "jenkins-test-coverage" script in the bin directory of the buildout
# that runs a code coverage analysis and creates a report in an XML format that
# Jenkins can read and process. There is no need to run "bin/jenkins-test"
# before
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Remove old results
    echo "Erase old coverage results."
    ${:coverage} erase
    # Collect test coverage results for all packages
    echo "Run test coverage analysis for all packages."
    DIRECTORIES="${jenkins:jenkins-test-directories}"
    # make DIRECTORIES a comma separated list
    SOURCES=$(echo -n $DIRECTORIES | sed  's/[[:space:]]/,/g')
    # Runs a code coverage analysis on top of the "jenkins-test" script for
    # all packages. The data will be collected in a ".coverage" output file
    # in the buildout directory.
    echo "Run coverage tests"
    ${:coverage} run -p --source="$SOURCES" ${:jenkins-test} --all
    echo "Create test coverage report."
    # Combine all package analysis
    ${:coverage} combine
    # Generates a "coverage.xml" file that Jenkins can read and process from the
    # ".coverage" file that the coverage report created.
    ${:coverage} xml -i -o ${buildout:parts-directory}/jenkins-test/coverage.xml
    echo "Test coverage report finished."
output = ${buildout:bin-directory}/jenkins-test-coverage
mode = 755
# FIXME: depend on coverage and jenkins-test recipe
coverage = ${coverage:bin-directory}/coverage
jenkins-test = ${jenkins-test:bin-directory}/jenkins-test

[coverage]
recipe = zc.recipe.egg
eggs = coverage
