node ('docker') {


    def basename = 'hub.bccvl.org.au/bccvl/bccvl'
    def imgversion = env.BUILD_NUMBER
    def img = null
    def version = null

    def pip_index_url = "http://${env.PIP_INDEX_HOST}:3141/bccvl/dev/+simple/"
    def pip_pre = "True"
    if (env.BRANCH_NAME == 'master') {
        pip_index_url = "http://${env.PIP_INDEX_HOST}:3141/bccvl/prod/+simple/"
        pip_pre = "False"
    }


    try {

        stage('Checkout') {
            checkout scm
            sh 'git clean -x -d -f -f -e "eggs"'
        }

        stage('Build') {

            img = docker.build("${basename}:${imgversion}",
                               "--rm --pull --build-arg PIP_INDEX_URL=${pip_index_url} --build-arg PIP_TRUSTED_HOST=${env.PIP_INDEX_HOST} --build-arg PIP_PRE=${pip_pre} .")

            def gittag = getGitTag()
            if (gittag) {
                imgversion = gittag
            } else {
                imgversion = 'latest'
            }
            img = reTagImage(img, basename, imgversion)
        }

        stage('Test') {
            // image inside runs within jenkins workspace mounted and workdir set to the workspace as well
            img.inside('-u root:root') {
                sh 'dbus-uuidgen > /etc/machine-id'
                sh 'cd ${BCCVL_HOME}; CELERY_CONFIG_MODULE= ; xvfb-run -l -a ./bin/jenkins-test-coverage'

                // jenkins can't read test results from inside container ... so let's copy them into the workspace
                sh 'cp -r ${BCCVL_HOME}/parts/jenkins-test .'
                // and give jenkins ownership
                sh 'chown -R 1000:1000 jenkins-test'
            }
            // capture test result
            step([
                $class: 'XUnitBuilder',
                thresholds: [
                    [$class: 'FailedThreshold', failureThreshold: '0',
                                                unstableThreshold: '1']
                ],
                tools: [
                    [$class: 'JUnitType', deleteOutputFiles: true,
                                          failIfNotNew: true,
                                          pattern: "jenkins-test/testreports/*.xml",
                                          stopProcessingIfError: true]
                ]
            ])
            // capture robot result
            step([
                $class: 'RobotPublisher',
                outputPath: "jenkins-test",
                outputFileName: 'robot_output.xml',
                disableArchiveOutput: false,
                reportFileName: 'robot_report.html',
                logFileName: 'robot_log.html',
                passThreshold: 90,
                unstableThreshold: 100,
                onlyCritical: false,
                otherFiles: '',
                enableCache: false
            ])

            // check if container starts up properly
            img.withRun() { bccvl ->

                def address = sh(script: "docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${bccvl.id}",
                                 returnStdout: true).trim()

                img.inside("--add-host=bccvl:${address}") {
                    sh 'curl --fail --silent --show-error --retry 10 --retry-delay 5 http://bccvl:8000/ > /dev/null'
                }
            }
        }

        stage('Publish') {
            if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {
                img.push()

                slackSend color: 'good', message: "New Image ${img.id}\n${env.JOB_URL}"
            }
        }

    }
    catch (err) {
        throw err
    }
    finally {
        stage('Cleanup') {
            // TODO: shall we keep the image? ... probably not as docker won't detect changes in src folders and therefore
            //       wouldn't rebuild with new sources
            if (img != null) {
                sh "docker rmi ${img.id}"
            }
        }
    }

}
